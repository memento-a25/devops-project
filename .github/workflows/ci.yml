name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clone full commit history, not only last one
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Dependencies
        run: pip install -r app/requirements.txt

      - name: Run Unit test
        run: pytest app/tests/test_basic.py


  build-test:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clone full commit history, not only last one
        
      
      - name: Build and Test Containers
        run: |
          docker compose -f docker-compose.ci.yml up --build -d
          sleep 15 # Wait for containers to initialise
          curl --fail http://localhost:8080
          curl --fail http://localhost:9091/metrics


  integration-test:
    needs: [unit-test, build-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clone full commit history, not only last one
          
      
      - name: Start containers
        run: docker compose -f docker-compose.ci.yml up -d
      
      
      - name: Wait for initialization
        run: sleep 30 # Grafana needs time to initialize
      
      
      - name: Run integration tests
        run: |
          pip install -r app/requirements.txt
          pytest app/tests/test_integration.py -v
        env:
        # Variables to access Grafana
          GRAFANA_URL: http://localhost:3001
          GRAFANA_USER: admin
          GRAFANA_PASSWORD: admin
          


  package:
    needs: [unit-test, build-test, integration-test]
    if: github.repository == 'memento-a25/jun-devops-project'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clone full commit history, not only last one
          

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Flask App
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=$GITHUB_REPOSITORY_URL


  deploy:
    needs: [unit-test, build-test, integration-test, package]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clone full commit history, not only last one

     
      - name: Sync project files
        run: |

          # Check if rsync is installed
          if ! command -v rsync &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y rsync
          fi
          
      - name: Sync project files
        run: |
          sudo mkdir -p /home/github-runner/devop-blog-project
           sudo rsync -a --delete \
          --exclude='venv/' \
          --exclude='.env' \
          --exclude='*.pyc' \
          --exclude='__pycache__/' \
          $GITHUB_WORKSPACE/ /home/github-runner/devop-blog-project/
          sudo chown -R github-runner:github-runner /home/github-runner/devop-blog-project
          sudo chmod -R 755 /home/github-runner/devop-blog-project
          

      - name: Show latest commit (debug)
        run: |
          ls -la /home/github-runner/devop-blog-project
          cd /home/github-runner/devop-blog-project && git log -1 --oneline

          
      - name: Deploy via Ansible
        run: | 
          export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          ansible-playbook -i ansible/inventory/hosts.ini  ansible/deploy.yml


      - name: Send Telegram Notification
        if: always() # Send even if fails
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            üöÄ Workflow: ${{ github.workflow }}
            ‚úÖ Status: ${{ job.status }}
            üåø Branch: ${{ github.ref }}
            üìù Commit: ${{ github.event.head_commit.message }}
            üë§ Author: ${{ github.actor }}
            üîó Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


      - name: Cleanup
        run: |
          git clean -fdx  # –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–µ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
          git reset --hard HEAD
