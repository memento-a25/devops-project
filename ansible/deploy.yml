- name: Deploy Application
  hosts: all
  become: yes
  vars:
    project_dir: "/home/github-runner/devop-blog-project"
    required_ports: [80, 3000, 9090]
  environment:
    DOCKERHUB_USERNAME: "{{ lookup ('env', 'DOCKERHUB_USERNAME') }}"
    DB_USER: "{{ lookup ('env', 'DB_USER') }}"
    DB_PASSWORD: "{{ lookup ('env', 'DB_PASSWORD') }}"
    DB_NAME: "{{ lookup ('env', 'DB_NAME') }}"
    
  tasks:

    - name: Stop and remove old containers
      command: /usr/bin/docker compose -f {{ project_dir }}/docker-compose.yml down --rmi all --volumes --remove-orphans
      args:
        chdir: "{{ project_dir }}"
      ignore_errors: yes


    - name: Check port availability
      shell: |
        PORT={{ item }}
        ss -tuln | grep "$PORT" || true
      register: port_checks
      loop: "{{ required_ports }}"
      changed_when: false
      ignore_errors: yes


    - name: Free up ports (kill processes)
      shell: |
        PORT={{ item.item }}
        PID=$(sudo ss -tulp | grep ":$PORT" | awk '{print $6}' | cut -d= -f2 | cut -d, -f1 | uniq)
        if [ -n "$PID" ]; then
          sudo kill -9 $PID
          echo "Killed process $PID on port $PORT"
        fi
      loop: "{{ port_checks.results }}"
      when: item.rc == 0
      ignore_errors: yes

  
    - name: Pull latest images
      command: /usr/bin/docker compose -f {{ project_dir }}/docker-compose.yml pull
      args:
        chdir: "{{ project_dir }}"


    - name: Build Dcoker images
      command: /usr/bin/docker compose -f {{ project_dir }}/docker-compose.yml build
      args:
        chdir: "{{ project_dir }}"
      register: build_result
      failed_when: build_result.rc != 0

        
    - name: Start containers
      command: /usr/bin/docker compose -f {{ project_dir }}/docker-compose.yml up -d
      args:
        chdir: "{{ project_dir }}"
      register: up_result
      failed_when: up_result.rc != 0

    - name: Show container logs on failure
      command: docker compose -f {{ project_dir }}/docker-compose.yml logs
      args:
        chdir: "{{ project_dir }}"
      when: build_result.failed or up_result.failed
